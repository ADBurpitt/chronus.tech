---
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;

function extractIcon(iconValue: unknown) {
  if (!iconValue) return { name: undefined, className: undefined, node: undefined };
  if (typeof iconValue === 'string') return { name: iconValue, className: undefined, node: undefined };
  if (typeof iconValue === 'object' && iconValue !== null && 'name' in iconValue) {
    const obj = iconValue as Record<string, unknown>;
    return { name: obj.name as string | undefined, className: (obj.class as string) ?? undefined, node: undefined };
  }
  return { name: undefined, className: undefined, node: iconValue };
}
---

{
  items && items.length > 0 && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, bullets, icon, callToAction, classes: itemClasses = {} }) => (
        <div
          class={twMerge(
            'relative flex flex-col intersect-once intersect-quarter intersect-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >
          {(() => {
            const { name: iconName, className: iconClass, node: iconNode } = extractIcon(icon ?? defaultIcon);
            if (iconName) {
              return (
                <Icon
                  name={iconName}
                  class={twMerge('mb-2 w-10 h-10', defaultIconClass, itemClasses?.icon, iconClass)}
                />
              );
            }
            if (iconNode) {
              return <div class={twMerge('mb-2 w-10 h-10', itemClasses?.icon)}>{iconNode}</div>;
            }
            return null;
          })()}
          <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
          {Array.isArray(bullets) && bullets.length > 0 ? (
            <ul
              class={twMerge(
                'text-muted mt-2 list-disc list-inside text-sm',
                descriptionClass,
                itemClasses?.description
              )}
            >
              {bullets.map((b) => (
                <li set:html={b} />
              ))}
            </ul>
          ) : typeof description === 'string' ? (
            <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
          ) : description ? (
            <div class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}>{description}</div>
          ) : null}
          {callToAction && (
            <div class="mt-2">
              <Button {...callToAction} />
            </div>
          )}
        </div>
      ))}
    </div>
  )
}
