---
import type { ItemGrid as Props } from '~/types';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;

// Helper to safely extract icon data when icon can be { name?: string; class?: string } or a string/node
function extractIcon(iconValue: unknown) {
  if (!iconValue) return { name: undefined, className: undefined, node: undefined };
  if (typeof iconValue === 'string') return { name: iconValue, className: undefined, node: undefined };
  if (typeof iconValue === 'object' && iconValue !== null && 'name' in iconValue) {
    const obj = iconValue as Record<string, unknown>;
    return { name: obj.name as string | undefined, className: (obj.class as string) ?? undefined, node: undefined };
  }
  return { name: undefined, className: undefined, node: iconValue };
}
---

{
  items && items.length > 0 && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, bullets, icon, callToAction, classes: itemClasses = {} }) => (
        <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
          <div class={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center">
              {(() => {
                const { name: iconName, className: iconClass, node: iconNode } = extractIcon(icon ?? defaultIcon);
                if (iconName) {
                  return (
                    <Icon
                      name={iconName}
                      class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', defaultIconClass, itemClasses?.icon, iconClass)}
                    />
                  );
                }
                if (iconNode) {
                  return <div class={twMerge('w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2', itemClasses?.icon)}>{iconNode}</div>;
                }
                return null;
              })()}
            </div>
            <div class="mt-0.5">
              {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
              {/* render bullets if provided, otherwise description */}
              {Array.isArray(bullets) && bullets.length > 0 ? (
                <ul
                  class={twMerge(
                    `${title ? 'mt-3' : ''} text-muted list-disc list-inside text-sm`,
                    descriptionClass,
                    itemClasses?.description
                  )}
                >
                  {bullets.map((b) => (
                    <li set:html={b} />
                  ))}
                </ul>
              ) : typeof description === 'string' ? (
                <p
                  class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                  set:html={description}
                />
              ) : description ? (
                <div class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}>
                  {description}
                </div>
              ) : null}
              {callToAction && (
                <div
                  class={twMerge(
                    `${title || description || (bullets && bullets.length) ? 'mt-3' : ''}`,
                    actionClass,
                    itemClasses?.actionClass
                  )}
                >
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
