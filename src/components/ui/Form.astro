---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const {
  inputs,
  textarea,
  disclaimer,
  button = 'Contact us',
  description = '',
  endpoint,      
  thanksUrl = '/thanks',
  subject = 'New inquiry'
} = Astro.props as Props;
---

<form
  id="contact-form"
  action={endpoint || undefined}
  method="POST"
  accept-charset="UTF-8"
  data-thanks-url={thanksUrl}
>
  {
      inputs &&
      inputs.map(
        ({ type: inputType = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={inputType}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required
                class="py-2 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder || ''}
          required
          class="py-2 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        ></textarea>
      </div>
    )
  }

  <!-- Hidden fields for Formspree -->
  {endpoint && (
    <>
      <input type="hidden" name="_subject" value={subject} />
      <!-- Honeypot; keep hidden -->
      <label class="hidden">Don't fill this out if you're human:
        <input name="_gotcha" tabindex="-1" autocomplete="off" />
      </label>
    </>
  )}

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            required
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-6 grid">
        <Button id="contact-submit" variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script is:inline>
  (function () {
    const form = document.getElementById('contact-form');
    if (!form) return;

    const thanksUrl = form.dataset.thanksUrl || '/thanks';
    const submitBtn = form.querySelector('#contact-submit');

    // Prevent double submits
    let inFlight = false;

    form.addEventListener('submit', async (e) => {
      // Always intercept; if JS fails for any reason, the Formspree
      // dashboard "Redirect" setting will handle fallback.
      e.preventDefault();

      // Native HTML5 validation first
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }

      if (inFlight) return;
      inFlight = true;
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.setAttribute('aria-busy', 'true');
      }

      try {
        const fd = new FormData(form);

        // Honeypot
        if (fd.get('_gotcha')) {
          inFlight = false;
          if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.removeAttribute('aria-busy');
          }
          return;
        }

        const res = await fetch(form.action, {
          method: 'POST',
          body: fd,
          // Ensures Formspree returns JSON (no redirect) for AJAX. 
          // (Their docs recommend this header.)
          headers: { 'Accept': 'application/json' },
          redirect: 'manual' // belt & suspenders: don't follow any 3xx
        });

        if (res.ok) {
          window.location.assign(thanksUrl);
          return;
        }

        // Try to surface Formspree error message if present
        let msg = 'There was a problem submitting the form. Please try again.';
        try {
          const data = await res.json();
          if (data && Array.isArray(data.errors) && data.errors[0]?.message) {
            msg = data.errors[0].message;
          }
        } catch { /* ignore parse errors */ }
        alert(msg);
      } catch {
        alert('Network error. Please check your connection and try again.');
      } finally {
        inFlight = false;
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.removeAttribute('aria-busy');
        }
      }
    });
  })();
</script>
